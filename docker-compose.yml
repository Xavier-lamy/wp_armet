version: '3.8'

services:
    #Définit le container pour la base de données mysql
    db: # Nom du container
        image: mysql:5.7 # Définit l'image à utiliser pour construire le container ainsi que la version
        restart: always # Définit le redémarrage à toujours, ce qui veut dire qu'elle démarrera toujours en même temps que les autres container
        environment: # Définit les variables d'environnement pour la bdd
            MYSQL_ROOT_PASSWORD: wordpress
            MYSQL_DATABASE: wordpress
            MYSQL_USER: wordpress
            MYSQL_PASSWORD: wordpress
        volumes: # Monte un volume à l'extérieur du container pour permettre la perstistence des données
            - db_data:/var/lib/mysql
    
    #Définit le container wordpress
    wordpress: # Nom du container
        depends_on:
            - db # Indique que docker doit d'abord démarrer la bdd avant de démarrer wordpress
        image: wordpress:latest # Récupère l'image avec la dernière version de wordpress
        ports:
            - "127.0.0.1:80:80" # Map le port Https (80) de notre machine sur celui de docker
            - "127.0.0.1:443:443" # Map le port Https (443) de notre machine sur celui de docker
        restart: always # Définit la politique de démarrage sur toujours
        environment: # Définit les variables d'environnement pour l'accès de wordpress à la bdd
            WORDPRESS_DB_HOST: db:3306
            WORDPRESS_DB_USER: wordpress
            WORDPRESS_DB_PASSWORD: wordpress
            WORDPRESS_DB_NAME: wordpress
        working_dir: /var/www/html # Définit le répertoire de travail du container
        volumes:
            - "./:/var/www/html" #Monte le répertoire de travail actuel (./) sur le container wordpress
            - "./uploads.ini:/usr/local/etc/php/conf.d/uploads.ini" #Monte le fichier uploads.ini sur le répertoire de configuration de php du container, note: si on choisit d'augmenter les limites d'upload, la limitation de mémoire,... dans un fichier htaccess ceci n'est pas nécessaire
    
    # Définit le container phpmyadmin
    phpmyadmin:
        depends_on:
            - db # php myadmin nécessite aussi d'être démarré après la bdd
        image: phpmyadmin:latest # On installe la dernière version de php admin
        ports:
            - "8080:8080" # On map notre port 8080 avec le port 8080 de docker, car wordpress utilise déjà le port 80 (8080 est un port alternatif pour le http)
        restart: always # On définit le paramètre de rédémarrage à toujours
        environment:
            PMA_HOST: db # Définit le nom du service de BDD à utiliser
            MYSQL_ROOT_PASSWORD: wordpress # Définit le mot de passe root à utiliser

volumes:
    db_data: # indique à docker qu'il faut créer le volume db_data depuis le volume définit dans le container MySql